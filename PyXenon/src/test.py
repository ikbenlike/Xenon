



import vm
import vm_utils


virt = vm.VirtualMachine()
loop = vm.XenonStackVector()
loop.size = 28
loop.cursor = 0
loop.vector = [vm.XenonStackItem() for i in range(28)]
vm_add_opcode_to_stack(loop, vm.CONST)
vm_add_int_to_stack(loop, 10)
vm_add_opcode_to_stack(loop, vm.GSTORE)
vm_add_int_to_stack(loop, 0)
vm_add_opcode_to_stack(loop, vm.CONST)
vm_add_int_to_stack(loop, 0)
vm_add_opcode_to_stack(loop, vm.GSTORE)
vm_add_int_to_stack(loop, 1)
vm_add_opcode_to_stack(loop, vm.GLOAD)
vm_add_int_to_stack(loop, 1)
vm_add_opcode_to_stack(loop, vm.GLOAD)
vm_add_int_to_stack(loop, 0)
vm_add_opcode_to_stack(loop, ILT)
vm_add_opcode_to_stack(loop, BRF)
vm_add_int_to_stack(loop, 24)
vm_add_opcode_to_stack(loop, vm.GLOAD)
vm_add_int_to_stack(loop, 1)
vm_add_opcode_to_stack(loop, vm.CONST)
vm_add_int_to_stack(loop, 1)
vm_add_opcode_to_stack(loop, IADD)
vm_add_opcode_to_stack(loop, vm.GSTORE)
vm_add_int_to_stack(loop, 1)
vm_add_opcode_to_stack(loop, BR)
vm_add_int_to_stack(loop, 8)
vm_add_opcode_to_stack(loop, vm.GLOAD)
vm_add_int_to_stack(loop, 0)
vm_add_opcode_to_stack(loop, IPRINTLN)
vm_add_opcode_to_stack(loop, vm.HALT)
vm = vm_create(loop, 2)
vm_exec(vm, 0, false)
vm_free(vm)
hellonums = vm.XenonStackVector()
hellonums.size = 4
hellonums.cursor = 0
hellonums.vector = calloc(1, sizeof(xenon_stack_item) * 4)
vm_add_opcode_to_stack(hellonums, vm.CONST)
vm_add_int_to_stack(hellonums, 1234)
vm_add_opcode_to_stack(hellonums, IPRINTLN)
vm_add_opcode_to_stack(hellonums, vm.HALT)
vm = vm_create(hellonums, 0)
vm_exec(vm, 0, false)
vm_free(vm)
f = vm.XenonStackVector()
f.size = 17
f.cursor = 0
f.vector = calloc(1, sizeof(xenon_stack_item) * 17)
vm_add_opcode_to_stack(f, vm.CONST)
vm_add_int_to_stack(f, 10)
vm_add_opcode_to_stack(f, CALL)
vm_add_func_to_stack(f, 6, 1, 1, x_void, x_native_t)
#/*vm_add_int_to_stack(f, 8, 3)
#vm_add_int_to_stack(f, 1, 4)
#vm_add_int_to_stack(f, 1, 5)*/
vm_add_opcode_to_stack(f, IPRINTLN)
vm_add_opcode_to_stack(f, vm.HALT)
vm_add_opcode_to_stack(f, ILOAD)
vm_add_int_to_stack(f, 0)
vm_add_opcode_to_stack(f, ISTORE)
vm_add_int_to_stack(f, 1)
vm_add_opcode_to_stack(f, ILOAD)
vm_add_int_to_stack(f, 1)
vm_add_opcode_to_stack(f, vm.CONST)
vm_add_int_to_stack(f, 2)
vm_add_opcode_to_stack(f, IMUL)
vm_add_opcode_to_stack(f, RET)
vm = vm_create(f, 0)
vm_exec(vm, 0, false)
vm_free(vm)
hello = vm.XenonStackVector()
hello.size = 4
hello.cursor = 0
hello.vector = calloc(1, sizeof(xenon_stack_item) * 4)
vm_add_opcode_to_stack(hello, vm.CONST)
vm_add_string_to_stack(hello, "Hello World!")
vm_add_opcode_to_stack(hello, SPRINTLN)
vm_add_opcode_to_stack(hello, vm.HALT)
vm = vm_create(hello, 0)
vm_exec(vm, 0, false)
vm_free(vm)
char *tmpstr = calloc(1, 10 * sizeof(char))
strcpy(tmpstr, "\"okay\n\n\"")
hellochar = vm.XenonStackVector()
hellochar.size = 14
hellochar.cursor = 0
hellochar.vector = calloc(1, sizeof(xenon_stack_item) * 14)
vm_add_opcode_to_stack(hellochar, vm.CONST)
vm_add_string_to_stack(hellochar, "and now with chars: ")
vm_add_opcode_to_stack(hellochar, SPRINT)
vm_add_opcode_to_stack(hellochar, vm.CONST)
vm_add_char_to_stack(hellochar, 'h')
vm_add_opcode_to_stack(hellochar, CPRINT)
vm_add_opcode_to_stack(hellochar, vm.CONST)
vm_add_char_to_stack(hellochar, 'i')
vm_add_opcode_to_stack(hellochar, CPRINTLN)
vm_add_opcode_to_stack(hellochar, vm.CONST)
vm_add_string_to_stack(hellochar, vm_parse_string(tmpstr))
vm_add_opcode_to_stack(hellochar, SPRINT)
vm_add_opcode_to_stack(hellochar, vm.HALT)
vm = vm_create(hellochar, 0)
vm_exec(vm, 0, false)
vm_free(vm)
free(tmpstr)
get_input = vm.XenonStackVector()
get_input.size = 6
get_input.cursor = 0
get_input.vector = calloc(1, sizeof(xenon_stack_item) * 6)
vm_add_opcode_to_stack(get_input, vm.CONST)
vm_add_string_to_stack(get_input, "enter some input: ")
vm_add_opcode_to_stack(get_input, SPRINT)
vm_add_opcode_to_stack(get_input, INPUT)
vm_add_opcode_to_stack(get_input, SPRINTLN)
vm_add_opcode_to_stack(get_input, vm.HALT)
vm = vm_create(get_input, 0)
vm_exec(vm, 0, false)
vm_free(vm)
func_test = vm.XenonStackVector()
func_test.size = 7
func_test.cursor = 0
func_test.vector = calloc(1, sizeof(xenon_stack_item) * 7)
vm_add_opcode_to_stack(func_test, 18)
vm_add_func_to_stack(func_test, 3, 0, 1, x_void, x_native_t)
vm_add_opcode_to_stack(func_test, vm.HALT)
vm_add_opcode_to_stack(func_test, vm.CONST)
vm_add_int_to_stack(func_test, 10)
vm_add_opcode_to_stack(func_test, IPRINTLN)
vm_add_opcode_to_stack(func_test, RET)
vm = vm_create(func_test, 0)
vm_exec(vm, 0, false)
vm_free(vm)


